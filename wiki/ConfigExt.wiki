#summary JOpenID Version 1.05 Highlights

== Configurable Extension Namespace Alias ==

Even during JOpenID`'`s intial release, support for OpenID Attribute Exchange is already available. The extension namespace alias used a hard-coded value of *_ext1_*. It was to do this Ok back then because Yahoo still doesn't support OpenID Attribute Exchange during those times. But now that Yahoo already does, we did some test and found out Yahoo has it`'`s own extension namespace alias requirement. As an RP connecting to Yahoo for OpenID authentication you must use this specific alias or else you won`'`t be able to query any info aside from the Identity. That's why in this version of JOpenID we decided to add support for configurable extension namespace aliases to solve this issue.

== How to use this new feature ==

Using the `MainServlet` from [DevGuide Developer's Guide] as our basis we modify it to now look this way
{{{
@Override
protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    String op = request.getParameter("op");
    if (op==null) {
        // check nonce:
        checkNonce(request.getParameter("openid.response_nonce"));
        // get authentication:
        HttpSession session = request.getSession();
        byte[] mac_key = (byte[]) session.getAttribute(ATTR_MAC);
        String alias = (String) session.getAttribute(ATTR_ALIAS);
        Authentication authentication = manager.getAuthentication(request, mac_key, alias);
        String identity = authentication.getIdentity();
        String email = authentication.getEmail();
        // TODO: create user if not exist in database:
        showAuthentication(response.getWriter(), identity, email);
    }
    else if ("Google".equals(op) || "Yahoo".equals(op)) {
        // redirect to Google/Yahoo sign on page:
        String alias = manager.lookupExtNsAlias(op);
        Endpoint endpoint = manager.lookupEndpoint(op);
        Association association = manager.lookupAssociation(endpoint);
        HttpSession session = request.getSession();
        session.setAttribute(ATTR_MAC, association.getRawMacKey());
        session.setAttribute(ATTR_ALIAS, alias);
        String url = manager.getAuthenticationUrl(endpoint, association);
        response.sendRedirect(url);
    }
    else {
        throw new ServletException("Bad parameter op=" + op);
    }
}
}}}
Notice that we are now storing two attributes in session. One is the ATTR_MAC and the other one is ATTR_ALIAS. The getAuthentication method also has an added new parameter which is the alias we stored from the session.

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages